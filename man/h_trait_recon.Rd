% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilhisse.R
\name{h_trait_recon}
\alias{h_trait_recon}
\title{Plot HiSSE model-averaged marginal ancestral state reconstruction for the trait}
\usage{
h_trait_recon(processed_hisse_recon, x_label, discrete = FALSE,
  cutoff = 0.5, tree_layout = "rectangular",
  tree_direction = "right", time_axis_ticks = 10, open_angle = 10)
}
\arguments{
\item{processed_hisse_recon}{An object produced by \code{h_process_recon}}

\item{x_label}{The name of the trait to be used for guide title}

\item{discrete}{Logical. Whether to discretize the probabilities of ancestral states into binary (0/1)}

\item{cutoff}{A decimal to be used as a threshold for discretizing}

\item{tree_layout}{A layout for the tree. Available options are 'rectangular' (default), 'slanted', 'circular', 'fan' and 'radial'.}

\item{tree_direction}{'right' (default), 'left', 'up', or 'down' for rectangular and slanted tree layouts}

\item{time_axis_ticks}{numeric giving the number of ticks for the time axis (default=10)}

\item{open_angle}{The degrees of empty space between the first and last tip. Only works for \code{tree_layout = 'fan'} and allows for a little more space around axis tick labels.}
}
\value{
A plot of the phylogeny with branches colored by hisse-inferred marginal ancestral states.
}
\description{
A function to plot a (model-averaged) marginal ancestral reconstruction for the trait data.
}
\examples{

library(hisse)
library(dplyr)
library(ggplot2)
library(viridis)
library(ggtree)
library(treeio)

asr <- get(load("data/hab.cid4.recon.Rsave"))
processed_hisse <- h_process_recon(hisse_recon=asr)

map_continuous <-
 h_trait_recon(
   processed_hisse_recon = processed_hisse,
   x_lab = "", discrete=FALSE, cutoff=.5)

# change colors, your can pass the trait name to `name=` to title the colorbar
map_continuous + scale_color_gradient(name="", low = "#132B43", high = "#56B1F7")

map_discrete <-
 h_trait_recon(
   processed_hisse_recon = processed_hisse,
   x_lab = "", discrete=TRUE, cutoff=.5)

# change colors
map_discrete + scale_color_manual(name="", values = c("red", "blue"))
}
